{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","resources/img/vision.png","components/searchChar/SearchChar.js","components/ErrorBoundary/ErrorBoundary.js","components/pages/MainPage.js","components/ErrorMessage/error.gif","components/ErrorMessage/ErrorMessage.js","services/MarvelService.js","hooks/https.hooks.js","components/spinner/Spinner.js"],"names":["View","desc","char","name","description","thumbnail","homepage","wiki","style","TransitionGroup","component","CSSTransition","classNames","timeout","className","src","includes","notImg","alt","objectFit","href","RandomChar","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","erorrMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","getAllCharacters","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","selected","setSelected","onRequest","initial","onCharListLoaded","newCharList","ended","length","items","arr","map","item","i","imgStyle","tabIndex","onCharSelected","onKeyPress","e","key","errorMessage","disabled","display","Skeleton","comics","checkDescription","to","resourceURI","substring","CharInfo","charId","skeleton","SearchChar","MarvelService","getCharacterByName","results","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","MainPage","selectedChar","Helmet","decoration","width","height","margin","img","setLoading","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","slice","path","extension","urls","getAllComics","_transformComics","getComics","title","pageCount","language","textObjects","price","prices"],"mappings":"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","file":"static/js/6.ba63b063.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import React, { useState, useEffect } from \"react\";\nimport \"./randomChar.scss\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\nimport ErrorMessage from \"../ErrorMessage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\nimport \"../spinner/spinner.scss\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nconst RandomChar = () => {\n  const [char, setChar] = useState(null);\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  useEffect(() => {\n    clearError();\n    updateChar();\n  }, []);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n    clearError();\n    getCharacter(id).then(onCharLoaded);\n  };\n\n  const erorrMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"randomchar\">\n      {erorrMessage}\n      {spinner}\n      {content}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button onClick={updateChar} className=\"button button__main\">\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki } = char;\n  const onEmptyDescription = (desc) => {\n    if (desc !== \"\") {\n      return desc;\n    } else {\n      return (desc = \"No description yet.\");\n    }\n  };\n\n  let style = false;\n\n  const notImg = (thumbnail) => {\n    if (thumbnail.includes(\"image_not_available\")) {\n      style = true;\n      return style, thumbnail;\n    }\n    return thumbnail;\n  };\n\n  return (\n    <TransitionGroup component={null}>\n      <CSSTransition classNames=\"randomchar__block\" timeout={500}>\n        <div className=\"randomchar__block\">\n          <img\n            src={notImg(thumbnail)} \n            alt=\"Random character\"\n            className=\"randomchar__img\"\n            style={style ? { objectFit: \"contain\" } : { objectFit: \"cover\" }}\n          />\n          <div className=\"randomchar__info\">\n            <p className=\"randomchar__name\">{name}</p>\n            <p className=\"randomchar__descr\">\n              {onEmptyDescription(description)}\n            </p>\n            <div className=\"randomchar__btns\">\n              <a href={homepage} className=\"button button__main\">\n                <div className=\"inner\">homepage</div>\n              </a>\n              <a href={wiki} className=\"button button__secondary\">\n                <div className=\"inner\">Wiki</div>\n              </a>\n            </div>\n          </div>\n        </div>\n      </CSSTransition>\n    </TransitionGroup>\n  );\n};\n\nexport default RandomChar;\n","import React, { useState, useEffect } from \"react\";\nimport \"./charList.scss\";\nimport ErrorMessage from \"../ErrorMessage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nconst CharList = (props) => {\n  const { loading, error, getAllCharacters, clearError } = useMarvelService();\n\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n  const [selected, setSelected] = useState(null);\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    clearError();\n    getAllCharacters(offset).then(onCharListLoaded);\n  };\n\n  const onCharListLoaded = (newCharList) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n    setCharList((charList) => [...charList, ...newCharList]);\n    setNewItemLoading((newItemLoading) => false);\n    setOffset((offset) => offset + 9);\n    setCharEnded((charEnded) => ended);\n  };\n\n  const selectChar = (id) => {\n    if (id !== \"\" || id !== null) {\n      setSelected(id);\n    }\n  };\n\n  const View = (arr) => {\n    const items = arr.map((item, i) => {\n      let imgStyle = { objectFit: \"cover\" };\n      if (\n        item.thumbnail ===\n        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n      ) {\n        imgStyle = { objectFit: \"unset\" };\n      }\n\n      return (\n        <CSSTransition key={item.id} classNames=\"char__item\" timeout={300}>\n          <li\n            key={i}\n            className={\n              selected === item.id\n                ? \"char__item char__item_selected\"\n                : \"char__item\"\n            }\n            tabIndex={0}\n            onClick={() => {\n              return props.onCharSelected(item.id), selectChar(item.id);\n            }}\n            onKeyPress={(e) => {\n              if (e.key === \" \" || e.key === \"Enter\") {\n                props.onCharSelected(item.id);\n              }\n            }}\n          >\n            <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n            <div className=\"char__name\">{item.name}</div>\n          </li>\n        </CSSTransition>\n      );\n    });\n    return (\n      <ul className=\"char__grid\">\n        <TransitionGroup component={null}>{items}</TransitionGroup>\n      </ul>\n    );\n  };\n\n  const items = View(charList);\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n  return (\n    <div className=\"char__list\">\n      {errorMessage}\n      {spinner}\n      {items}\n      <button\n        className=\"button button__main button__long\"\n        onClick={() => onRequest(offset)}\n        disabled={newItemLoading}\n        style={{ display: charEnded ? \"none\" : \"block\" }}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nexport default CharList;\n","import \"./skeleton.scss\";\n\nconst Skeleton = () => {\n  return (\n    <>\n      <p className=\"char__select\">\n        Please select a character to see information\n      </p>\n      <div className=\"skeleton\">\n        <div className=\"pulse skeleton__header\">\n          <div className=\"pulse skeleton__circle\"></div>\n          <div className=\"pulse skeleton__mini\"></div>\n        </div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n      </div>\n    </>\n  );\n};\n\nexport default Skeleton;\n","import React, { useEffect, useState } from \"react\";\nimport ErrorMessage from \"../ErrorMessage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport Skeletion from \"../skeleton/Skeleton\";\nimport \"./charInfo.scss\";\nimport { NavLink } from \"react-router-dom\";\n\nconst CharInfo = (props) => {\n  const [char, setChar] = useState(null);\n\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n  }, [props.charId]);\n\n  const updateChar = () => {\n    const { charId } = props;\n    if (!charId) {\n      return;\n    }\n    clearError();\n    getCharacter(charId).then(onCharLoaded);\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const skeleton = char || loading || error ? null : <Skeletion />;\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n  useEffect(() => {\n    updateChar();\n  }, [props.charId]);\n\n  return (\n    <div className=\"char__info\">\n      {skeleton}\n      {errorMessage}\n      {spinner}\n      {content}\n    </div>\n  );\n};\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = char;\n  let style = false;\n\n  function notImg(thumbnail) {\n    if (thumbnail.includes(\"image_not_available\")) {\n      style = true;\n      return style, thumbnail;\n    }\n    return thumbnail;\n  }\n\n  function checkDescription(description) {\n    if (description !== \"\") {\n      return description;\n    } else {\n      return (description = \"There is no description yet.\");\n    }\n  }\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img\n          src={notImg(thumbnail)}\n          alt={name}\n          style={style ? { objectFit: \"contain\" } : { objectFit: \"cover\" }}\n        />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">HomePage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{checkDescription(description)}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : \"Didn't have a comics.\"}\n        {comics.map((item, i) => {\n          if (i <= 9) {\n            return (\n              <li key={i} className=\"char__comics-item\">\n                <NavLink to={`/comics/${item.resourceURI.substring(43)}`}>\n                  {item.name}\n                </NavLink>\n              </li>\n            );\n          }\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default CharInfo;\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport {\r\n  Formik,\r\n  Field,\r\n  Form,\r\n  ErrorMessage as FormikErrorMessage,\r\n} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ErrorMessage from \"../ErrorMessage/ErrorMessage\";\r\nimport \"./searchChar.scss\";\r\nimport MarvelService from \"../../services/MarvelService\";\r\n\r\nconst SearchChar = () => {\r\n  const [char, setChar] = useState(null);\r\n  const { loading, error, getCharacterByName, clearError } = MarvelService();\r\n\r\n  const updateChar = (name) => {\r\n    clearError();\r\n    getCharacterByName(name).then(onCharLoaded);\r\n  };\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const errorMessage = error ? (\r\n    <div className=\"char__search-critical-error\">\r\n      <ErrorMessage />\r\n    </div>\r\n  ) : null;\r\n\r\n  const results = !char ? null : char.length > 0 ? (\r\n    <div className=\"char__search-wrapper\">\r\n      <div className=\"char__search-success\">\r\n        There is! Visit {char[0].name} page?\r\n      </div>\r\n      <Link\r\n        to={`/characters/${char[0].id}`}\r\n        className=\"button button__secondary\"\r\n      >\r\n        <div className=\"inner\">To page</div>\r\n      </Link>\r\n    </div>\r\n  ) : (\r\n    <div className=\"char__search-error\">\r\n      The character was not found. Check the name and try again\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"char__search-form\">\r\n      <Formik\r\n        initialValues={{\r\n          charName: \"\",\r\n        }}\r\n        validationSchema={Yup.object({\r\n          charName: Yup.string().required(\"Field is required\"),\r\n        })}\r\n        onSubmit={({ charName }) => {\r\n          updateChar(charName);\r\n        }}\r\n      >\r\n        <Form>\r\n          <label className=\"char__search-label\" htmlFor=\"charName\">\r\n            Or find a character by name:\r\n          </label>\r\n          <div className=\"char__search-wrapper\">\r\n            <Field\r\n              id=\"charName\"\r\n              name=\"charName\"\r\n              type=\"text\"\r\n              placeholder=\"Enter name\"\r\n            />\r\n            <button\r\n              type=\"submit\"\r\n              className=\"button button__main\"\r\n              disabled={loading}\r\n            >\r\n              <div className=\"inner\">find</div>\r\n            </button>\r\n          </div>\r\n          <FormikErrorMessage\r\n            component=\"div\"\r\n            className=\"char__search-error\"\r\n            name=\"charName\"\r\n          />\r\n        </Form>\r\n      </Formik>\r\n      {results}\r\n      {errorMessage}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchChar;\r\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../ErrorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.log(error, errorInfo);\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import { useState } from \"react\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport decoration from \"../../resources/img/vision.png\";\r\nimport SearchChar from \"../searchChar/SearchChar\";\r\nimport ErrorBoundary from \"../ErrorBoundary/ErrorBoundary\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst MainPage = () => {\r\n  const [state, setState] = useState({\r\n    selectedChar: null,\r\n  });\r\n\r\n  const onCharSelected = (id) => {\r\n    setState({\r\n      selectedChar: id,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta name=\"description\" content=\"Marvel information portal\" />\r\n        <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={state.selectedChar} />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <SearchChar />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from \"./error.gif\";\r\n\r\nfunction ErrorMessage() {\r\n  return (\r\n    <img\r\n      style={{\r\n        display: \"block\",\r\n        width: \"250px\",\r\n        height: \"250px\",\r\n        objectFit: \"contain\",\r\n        margin: \"0 auto\",\r\n      }}\r\n      src={img}\r\n      alt=\"Error\"\r\n    />\r\n  );\r\n}\r\n\r\nexport default ErrorMessage;\r\n","import { useHttp } from \"../hooks/https.hooks\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=3b3962af7c9aa2832c028fd9f23a5a5c\";\r\n  const _baseOffset = 210;\r\n  const __comicsBaseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}/characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const getAllComics = async (offset = __comicsBaseOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComics = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} p.`\r\n        : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || \"en-us\",\r\n      price: comics.prices.price ? `${comics.prices.price}$` : \"not available\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getCharacterByName,\r\n    clearError,\r\n    getAllComics,\r\n    getComics,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setLoading(true);\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        setLoading(false);\r\n        return data;\r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return { loading, request, error, clearError };\r\n};\r\n","import \"./spinner.scss\";\r\n\r\nfunction Spinner() {\r\n  return <div className=\"lds-dual-ring\"></div>;\r\n}\r\n\r\nexport default Spinner;\r\n"],"sourceRoot":""}